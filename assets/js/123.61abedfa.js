(window.webpackJsonp=window.webpackJsonp||[]).push([[123],{846:function(e,n,t){"use strict";t.r(n);var a=t(5),r=Object(a.a)({},(function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h2",{attrs:{id:"_1-beanfactory"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-beanfactory"}},[e._v("#")]),e._v(" 1. BeanFactory")]),e._v(" "),t("p",[e._v("The BeanFactory which is end with Factory, is a factory interface that is used for managing beans. In spring, BeanFactory is a core interface in IoC container and its duty is intancing, pointing and setting denpendencies.")]),e._v(" "),t("p",[e._v("The Spring have many implementation of BeanFactory and the XmlBeanFactory is one of them which is using XML to describe relationship of beans.")]),e._v(" "),t("p",[e._v("Intancing the container")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v('Resource resource = new FileSystemResource("beans.xml");\nBeanFactory factory = new XmlBeanFactory(resource);\n')])])]),t("p",[e._v("or")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v('ClassPathResource resource = new ClassPathResource("beans.xml");\nBeanFactory factory = new XmlBeanFactory(resource);\n')])])]),t("p",[e._v("or")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v('ApplicationContext context = new ClassPathXmlApplicationContext(new String[] {"applicationContext.xml", "applicationContext-part2.xml"});\nBeanFactory factory = (BeanFactory) context;\n')])])]),t("p",[e._v("Then we can use getBean(String beanName) function to get the bean intance and there are 6 functions can be used:")]),e._v(" "),t("ul",[t("li",[e._v("boolean containsBean(String beanName) : It is used for judging whether the container has the bean. If so return ture.")]),e._v(" "),t("li",[e._v("Object getBean(String) : It gets a bean with the BeanName. If the scope of bean is singleton then return a sheared bean, if it is prototype then return a new bean, if there is no bean with the BeanName then return exception.")]),e._v(" "),t("li",[e._v("Object getBean(String, Class) : Return a bean with a BeanName and change its type to the class")]),e._v(" "),t("li",[e._v("Class getType(String name) : Return a class type of a bean with the BeanName.")]),e._v(" "),t("li",[e._v("boolean isSingleton(String) : Judging whether the scope of the bean is singleton")]),e._v(" "),t("li",[e._v("String[] getAliases(String name) : Return all Aliases of a bean with the BeanName.")])]),e._v(" "),t("h2",{attrs:{id:"_2-factorybean"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-factorybean"}},[e._v("#")]),e._v(" 2. FactoryBean")]),e._v(" "),t("p",[e._v("The FactoryBean which is end with Bean is a bean but it is special. It implements FactoryBean"),t("T",[e._v(" interface and you can get a bean from getObject() of FactoryBean which is not FactoryBean it self by using ID. If you want to get the FactoryBean, plus a & in front of ID.")])],1),e._v(" "),t("p",[e._v("Here is an exmple of inmplements a FactoryBean and proxy a instence and handler all function with a LOG.")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v('public class MyFactoryBean implements FactoryBean<Object>, InitializingBean, DisposableBean {\n\n    private static final Logger logger = LoggerFactory.getLogger(MyFactoryBean.class);\n    \n    private String interfaceName;\n    \n    private Object target;\n    \n    private Object proxyObj;\n    \n    @Override\n    public void destroy() throws Exception {\n        logger.debug("destroy......");\n    }\n\n    @Override\n    public void afterPropertiesSet() throws Exception {\n        proxyObj = Proxy.newProxyInstance(\n                this.getClass().getClassLoader(), \n                new Class[] { Class.forName(interfaceName) }, \n                new InvocationHandler() {\n                    \n            @Override\n            public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n                logger.debug("invoke method......" + method.getName());\n                logger.debug("invoke method before......" + System.currentTimeMillis());\n                Object result = method.invoke(target, args);\n                logger.debug("invoke method after......" + System.currentTimeMillis());\n                return result;\n            }\n            \n        });\n        logger.debug("afterPropertiesSet......");\n    }\n\n    @Override\n    public Object getObject() throws Exception {\n        logger.debug("getObject......");\n        return proxyObj;\n    }\n\n    @Override\n    public Class<?> getObjectType() {\n        return proxyObj == null ? Object.class : proxyObj.getClass();\n    }\n\n    @Override\n    public boolean isSingleton() {\n        return true;\n    }\n\n    public String getInterfaceName() {\n        return interfaceName;\n    }\n\n    public void setInterfaceName(String interfaceName) {\n        this.interfaceName = interfaceName;\n    }\n\n    public Object getTarget() {\n        return target;\n    }\n\n    public void setTarget(Object target) {\n        this.target = target;\n    }\n\n    public Object getProxyObj() {\n        return proxyObj;\n    }\n\n    public void setProxyObj(Object proxyObj) {\n        this.proxyObj = proxyObj;\n    }\n\n}\n')])])]),t("p",[e._v("XML-Bean config is")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v('<bean id="fbHelloWorldService" class="com.kincolle.MyFactoryBean">\n    <property name="interfaceName" value="com.kincolle.HelloWorldService" />\n    <property name="target" ref="helloWorldService" />\n</bean>\n')])])]),t("p",[e._v("Junit Test class")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v('@RunWith(JUnit4ClassRunner.class)\n@ContextConfiguration(classes = { MyFactoryBeanConfig.class })\npublic class MyFactoryBeanTest {\n    @Autowired\n    private ApplicationContext context;\n    \n    @Test\n    public void testFactoryBean() {\n        HelloWorldService helloWorldService = (HelloWorldService) context.getBean("fbHelloWorldService");\n        helloWorldService.getBeanName();\n        helloWorldService.sayHello();\n    }\n}\n')])])])])}),[],!1,null,null,null);n.default=r.exports}}]);