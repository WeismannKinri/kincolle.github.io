(window.webpackJsonp=window.webpackJsonp||[]).push([[126],{752:function(t,n,e){"use strict";e.r(n);var a=e(0),o=Object(a.a)({},(function(){var t=this,n=t.$createElement,e=t._self._c||n;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h2",{attrs:{id:"transaction"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#transaction"}},[t._v("#")]),t._v(" Transaction")]),t._v(" "),e("p",[t._v("In computer science, ACID (Atomicity, Consistency, Isolation, Durability) is a set of properties of database transactions intended to guarantee validity even in the event of errors, power failures, etc.")]),t._v(" "),e("ul",[e("li",[t._v("Atomicity")])]),t._v(" "),e("blockquote",[e("p",[t._v('Transactions are often composed of multiple statements. Atomicity guarantees that each transaction is treated as a single "unit", which either succeeds completely, or fails completely: if any of the statements constituting a transaction fails to complete, the entire transaction fails and the database is left unchanged. An atomic system must guarantee atomicity in each and every situation, including power failures, errors and crashes.')])]),t._v(" "),e("ul",[e("li",[t._v("Consistency")])]),t._v(" "),e("blockquote",[e("p",[t._v("Consistency ensures that a transaction can only bring the database from one valid state to another, maintaining database invariants: any data written to the database must be valid according to all defined rules, including constraints, cascades, triggers, and any combination thereof. This prevents database corruption by an illegal transaction, but does not guarantee that a transaction is correct.")])]),t._v(" "),e("ul",[e("li",[t._v("Isolation")])]),t._v(" "),e("blockquote",[e("p",[t._v("Transactions are often executed concurrently (e.g., reading and writing to multiple tables at the same time). Isolation ensures that concurrent execution of transactions leaves the database in the same state that would have been obtained if the transactions were executed sequentially. Isolation is the main goal of concurrency control; depending on the method used, the effects of an incomplete transaction might not even be visible to other transactions.")])]),t._v(" "),e("ul",[e("li",[t._v("Durability")])]),t._v(" "),e("blockquote",[e("p",[t._v("Durability guarantees that once a transaction has been committed, it will remain committed even in the case of a system failure (e.g., power outage or crash). This usually means that completed transactions (or their effects) are recorded in non-volatile memory.")])]),t._v(" "),e("h2",{attrs:{id:"propagation"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#propagation"}},[t._v("#")]),t._v(" Propagation")]),t._v(" "),e("ul",[e("li",[t._v("PROPAGATION_REQUIRED")])]),t._v(" "),e("blockquote",[e("p",[t._v("This attribute tells that the code needs to be run in a transactional context. If a transaction already exists then the code will use it otherwise a new transaction is created. This is the default and mostly widely used transaction setting.")])]),t._v(" "),e("ul",[e("li",[t._v("PROPAGATION_SUPPORTS")])]),t._v(" "),e("blockquote",[e("p",[t._v("If a transaction exists then the code will use it, but the code does not require a new one. As an example, consider a ticket reservation system. A query to get total seats available can be executed non-transactionally. However, if used within a transaction context it will deduct tickets already selected and reduce them from the total count, and hence may give a better picture. This attribute should be used with care especially when PROPAGATION_REQUIRED or PROPAGATION_REQUIRES_NEW is used within a PROPAGATION_SUPPORTS context.")])]),t._v(" "),e("ul",[e("li",[t._v("PROPAGATION_MANDATORY")])]),t._v(" "),e("blockquote",[e("p",[t._v("Participates in an existing transaction, however if no transaction context is present then it throws a TransactionRequiredException")])]),t._v(" "),e("ul",[e("li",[t._v("PROPAGATION_REQUIRES_NEW")])]),t._v(" "),e("blockquote",[e("p",[t._v("Creates a new transaction and if an existing transaction is present then it is suspended. In other words a new transaction is always started. When the new transaction is complete then the original transaction resumes. This transaction type is useful when a sub activity needs to be completed irrespective of the containing transaction. The best example of this is logging. Even if a transaction roll backs you still want to preserve the log statements. Transaction suspension may not work out of the box with all transaction managers, so make sure that the transaction manager supports transaction suspension")])]),t._v(" "),e("ul",[e("li",[t._v("PROPAGATION_NOT_SUPPORTED")])]),t._v(" "),e("blockquote",[e("p",[t._v("This attribute says that transaction is not supported. In other words the activity needs to be performed non-transactionally. If an existing transaction is present then it is suspended till the activity finishes.")])]),t._v(" "),e("ul",[e("li",[t._v("PROPAGATION_NEVER")])]),t._v(" "),e("blockquote",[e("p",[t._v("This attributes says that the code cannot be invoked within a transaction. However, unlike PROPAGATION_NOT_SUPPORTED, if an existing transaction is present then an exception will be thrown")])]),t._v(" "),e("ul",[e("li",[t._v("PROPAGATION_NESTED")])]),t._v(" "),e("blockquote",[e("p",[t._v("The code is executed within a nested transaction if existing transaction is present, if no transaction is present then a new transaction is created. Nested transaction is supported out of the box on only certain transaction managers.")])]),t._v(" "),e("h2",{attrs:{id:"example"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#example"}},[t._v("#")]),t._v(" Example")]),t._v(" "),e("p",[t._v("Here we simulate a stock buying:")]),t._v(" "),e("p",[t._v("The Account POJO:")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("public class Account {\n \n\tprivate int accountid;\n\tprivate String name;\n\tprivate String balance;\n\t\n\t\n\tpublic int getAccountid() {\n\t\treturn accountid;\n\t}\n\tpublic void setAccountid(int accountid) {\n\t\tthis.accountid = accountid;\n\t}\n\tpublic String getName() {\n\t\treturn name;\n\t}\n\tpublic void setName(String name) {\n\t\tthis.name = name;\n\t}\n\tpublic String getBalance() {\n\t\treturn balance;\n\t}\n\tpublic void setBalance(String balance) {\n\t\tthis.balance = balance;\n\t}\n}\n")])])]),e("p",[t._v("The stock POJO:")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("public class Stock {\n \n\tprivate int stockid;\n\tprivate String name;\n\tprivate Integer count;\n\t\n\tpublic Stock() {\n\t\tsuper();\n\t}\n\t \n\tpublic Stock(int stockid, String name, Integer count) {\n\t\tsuper();\n\t\tthis.stockid = stockid;\n\t\tthis.name = name;\n\t\tthis.count = count;\n\t}\n \n\tpublic int getStockid() {\n\t\treturn stockid;\n\t}\n \n\tpublic void setStockid(int stockid) {\n\t\tthis.stockid = stockid;\n\t}\n \n\tpublic String getName() {\n\t\treturn name;\n\t}\n\tpublic void setName(String name) {\n\t\tthis.name = name;\n\t}\n\tpublic Integer getCount() {\n\t\treturn count;\n\t}\n\tpublic void setCount(Integer count) {\n\t\tthis.count = count;\n\t}\n\t\n}\n")])])]),e("p",[t._v("AccountDao")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("public interface AccountDao {\n \n\tvoid addAccount(String name,double money);\n\t\n\tvoid updateAccount(String name,double money,boolean isbuy);\n\t\n}\n")])])]),e("p",[t._v("Implementation of the AccountDao:")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v('public class AccountDaoImpl extends JdbcDaoSupport implements AccountDao {\n \n\t@Override\n\tpublic void addAccount(String name, double money) {\n\t\tString sql = "insert account(name,balance) values(?,?);";\n\t\tthis.getJdbcTemplate().update(sql,name,money);\n\t\t\n\t}\n \n\t@Override\n\tpublic void updateAccount(String name, double money, boolean isbuy) {\n\t\tString sql = "update account set balance=balance+? where name=?";\n\t\tif(isbuy)\n\t\t\tsql = "update account set balance=balance-? where name=?";\n\t\tthis.getJdbcTemplate().update(sql, money,name);\n\t}\n\t\n}\n')])])]),e("p",[t._v("StockDao")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("public interface StockDao {\n\t\n\tvoid addStock(String sname,int count);\n\t\n\tvoid updateStock(String sname,int count,boolean isbuy);\n \n}\n")])])]),e("p",[t._v("Implementation of the StockDao:")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v('public class StockDaoImpl extends JdbcDaoSupport implements StockDao {\n \n\t@Override\n\tpublic void addStock(String sname, int count) {\n\t\tString sql = "insert into stock(name,count) values(?,?)";\n\t\tthis.getJdbcTemplate().update(sql,sname,count);\n\t}\n \n\t@Override\n\tpublic void updateStock(String sname, int count, boolean isbuy) {\n\t\tString sql = "update stock set count = count-? where name = ?";\n\t\tif(isbuy)\n\t\t\tsql = "update stock set count = count+? where name = ?";\n\t\tthis.getJdbcTemplate().update(sql, count,sname);\n\t}\n\t\n}\n')])])]),e("p",[t._v("Service interface")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("public interface BuyStockService {\n \n\tpublic void addAccount(String accountname, double money);\n\t\n\tpublic void addStock(String stockname, int amount);\n\t\n\tpublic void buyStock(String accountname, double money, String stockname, int amount) throws BuyStockException;\n\t\n}\n")])])]),e("p",[t._v("Implementation of the Service interface:")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v('public class BuyStockServiceImpl implements BuyStockService{\n\t\n\tprivate AccountDao accountDao;\n\tprivate StockDao stockDao;\n\t\n\t@Override\n\tpublic void addAccount(String accountname, double money) {\n\t\taccountDao.addAccount(accountname,money);\n\t}\n \n\t@Override\n\tpublic void addStock(String stockname, int amount) {\n\t\tstockDao.addStock(stockname,amount);\n\t}\n \n\t@Override\n\tpublic void buyStock(String accountname, double money, String stockname, int amount) throws BuyStockException {\n\t\tboolean isBuy = true;\n\t\taccountDao.updateAccount(accountname, money, isBuy);\n\t\tif(isBuy==true){\n\t\t\tthrow new BuyStockException("error happened when buying stock");\n\t\t}\n\t\t\tstockDao.updateStock(stockname, amount, isBuy);\n\t}\n \n\tpublic AccountDao getAccountDao() {\n\t\treturn accountDao;\n\t}\n \n\tpublic void setAccountDao(AccountDao accountDao) {\n\t\tthis.accountDao = accountDao;\n\t}\n \n\tpublic StockDao getStockDao() {\n\t\treturn stockDao;\n\t}\n \n\tpublic void setStockDao(StockDao stockDao) {\n\t\tthis.stockDao = stockDao;\n\t}\n\t\n}\n')])])]),e("p",[t._v("Costomized exception:")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("public class BuyStockException extends Exception {\n \n\tpublic BuyStockException() {\n\t\tsuper();\n\t}\n \n\tpublic BuyStockException(String message) {\n\t\tsuper(message);\n\t}\n \n}\n")])])]),e("p",[t._v("XML for TransactionProxyFactoryBean:")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v('<?xml version="1.0" encoding="UTF-8"?>\n<beans xmlns="http://www.springframework.org/schema/beans"\n    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\n    xmlns:context="http://www.springframework.org/schema/context"\n    xmlns:mvc="http://www.springframework.org/schema/mvc"\n    xmlns:aop="http://www.springframework.org/schema/aop"\n    xmlns:tx="http://www.springframework.org/schema/tx"\n    xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\n        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd\n        http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd\n        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.2.xsd\n        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-aop-4.2.xsd\n        ">\n\t\n\t<context:property-placeholder location="classpath:jdbc.properties"/>\n\t\n\t<bean id="dataSource" class="com.kincolle.DataSource"  >\n\t\t <property name="driverClass" value="${jdbc.driverClass}"></property>\n\t\t <property name="jdbcUrl"  value="${jdbc.url}"></property>\n         <property name="user"  value="${jdbc.username}"></property>\n         <property name="password" value="${jdbc.password}"></property>\n\t</bean>\n\t\n\t<bean id="accountDao" class="com.kincolle.dao.AccountDaoImpl">\n\t\t<property name="dataSource" ref="dataSource"/>\n\t</bean>\n\t\n\t<bean id="stockDao" class="com.kincolle.dao.StockDaoImpl">\n\t\t<property name="dataSource" ref="dataSource"/>\n\t</bean>\n\t\n\t<bean id="buyStockService" class="com.kincolle.service.BuyStockServiceImpl">\n\t\t<property name="accountDao" ref="accountDao"></property>\n\t\t<property name="stockDao" ref="stockDao"></property>\n\t</bean>\n\t\n\t<bean id="myTracnsactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">\n\t\t<property name="dataSource" ref="dataSource"></property>\n\t</bean>\n\t\n\t<bean id="serviceProxy" class="org.springframework.transaction.interceptor.TransactionProxyFactoryBean">\n\t\t<property name="transactionManager" ref="myTracnsactionManager"></property>\n\t\t<property name="target" ref="buyStockService"></property>\n\t\t<property name="transactionAttributes">\n\t\t\t<props>\n\t\t\t\t<prop key="add*">ISOLATION_DEFAULT,PROPAGATION_REQUIRED</prop>\n\t\t\t\t<prop key="buyStock">ISOLATION_DEFAULT,PROPAGATION_REQUIRED,-BuyStockException</prop>\n\t\t\t</props>\n\t\t</property>\n\t\t\n\t</bean>\n\t\t\n</beans>  \n')])])]),e("p",[t._v("Test")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v('public static void main(String[] args) {\n\tString resouce = "com/kincolle/applicationContext.xml";\n\tApplicationContext applicationContext = new ClassPathXmlApplicationContext(resouce);\n\tBuyStockService buyStockService =  (BuyStockService) applicationContext.getBean("serviceProxy");\t\t\n\ttry {\n\t\tbuyStockService.buyStock("kincolle", 1000, "ctrip", 100);\n\t} catch (BuyStockException e) {\n\t\te.printStackTrace();\n\t}\n}\n')])])]),e("p",[t._v("Then the transaction will let error happen.")])])}),[],!1,null,null,null);n.default=o.exports}}]);