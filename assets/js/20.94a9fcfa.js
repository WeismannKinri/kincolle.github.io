(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{580:function(t,e,s){t.exports=s.p+"assets/img/1.3a6455ec.gif"},581:function(t,e,s){t.exports=s.p+"assets/img/2.404d1dec.gif"},582:function(t,e,s){t.exports=s.p+"assets/img/3.0a34c2f8.gif"},583:function(t,e,s){t.exports=s.p+"assets/img/4.1dcffbc7.gif"},742:function(t,e,s){"use strict";s.r(e);var a=s(5),r=Object(a.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"_1-definition-of-tree"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-definition-of-tree"}},[t._v("#")]),t._v(" 1. Definition of Tree")]),t._v(" "),a("p",[t._v("Binary Search Tree is a binary tree with the following characters:")]),t._v(" "),a("ul",[a("li",[t._v("If a node that its left subtree is not empty,then values of all the node in the left subtree must smaller than value of this node")]),t._v(" "),a("li",[t._v("If a node that its right subtree is not empty,then values of all the node in the right subtree must bigger than value of this node")]),t._v(" "),a("li",[t._v("Every left and right subtree is still a Binary Search Tree")]),t._v(" "),a("li",[t._v("No 2 nodes that their values equel to each other.")])]),t._v(" "),a("p",[t._v("The time of searching are inserting is O(log n).")]),t._v(" "),a("h2",{attrs:{id:"_2-search-one-element-in-bst"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-search-one-element-in-bst"}},[t._v("#")]),t._v(" 2. Search One Element in BST")]),t._v(" "),a("p",[t._v("The following GIF shows you how it searches")]),t._v(" "),a("ol",[a("li",[t._v("If b is a empty tree then searching fails")]),t._v(" "),a("li",[t._v("if x equals to root node of b then succees")]),t._v(" "),a("li",[t._v("if x is smaller than root node of b then go left subtree")]),t._v(" "),a("li",[t._v("else go right subtree")])]),t._v(" "),a("p",[a("img",{attrs:{src:s(580),alt:""}})]),t._v(" "),a("h2",{attrs:{id:"_3-build-a-bst-from-a-sorted-array"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-build-a-bst-from-a-sorted-array"}},[t._v("#")]),t._v(" 3. Build a BST From a Sorted Array")]),t._v(" "),a("p",[a("img",{attrs:{src:s(581),alt:""}})]),t._v(" "),a("h2",{attrs:{id:"_4-insert-element-into-bst"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-insert-element-into-bst"}},[t._v("#")]),t._v(" 4. Insert Element Into BST")]),t._v(" "),a("p",[t._v("Insert a node s into a BST a will be like:")]),t._v(" "),a("ol",[a("li",[t._v("If b is an empty tree, then insert s as a root node")]),t._v(" "),a("li",[t._v("If s->data equals to b then return")]),t._v(" "),a("li",[t._v("If s->data is smaller then b then go left")]),t._v(" "),a("li",[t._v("else go right")])]),t._v(" "),a("p",[a("img",{attrs:{src:s(582),alt:""}})]),t._v(" "),a("h2",{attrs:{id:"_5-turn-bst-into-a-sorted-array"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-turn-bst-into-a-sorted-array"}},[t._v("#")]),t._v(" 5. Turn BST Into a Sorted Array")]),t._v(" "),a("p",[a("img",{attrs:{src:s(583),alt:""}})])])}),[],!1,null,null,null);e.default=r.exports}}]);