(window.webpackJsonp=window.webpackJsonp||[]).push([[111],{742:function(e,t,i){"use strict";i.r(t);var s=i(0),r=Object(s.a)({},(function(){var e=this,t=e.$createElement,i=e._self._c||t;return i("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[i("h2",{attrs:{id:"introduction-of-distributed-lock"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#introduction-of-distributed-lock"}},[e._v("#")]),e._v(" Introduction of Distributed Lock")]),e._v(" "),i("p",[e._v("In distributed situation, if we want to get Consistency of CAP, we can use Distributed Lock to implement it. There are 3 types of it:")]),e._v(" "),i("ul",[i("li",[e._v("Database Distributed Lock")]),e._v(" "),i("li",[e._v("Cache Distributed Lock")]),e._v(" "),i("li",[e._v("Zookeeper Distributed Lock")])]),e._v(" "),i("p",[e._v("Here I just want to introduce the Cache Distributed Lock implemented by using redis.")]),e._v(" "),i("h2",{attrs:{id:"redis-distributed-lock"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#redis-distributed-lock"}},[e._v("#")]),e._v(" Redis Distributed Lock")]),e._v(" "),i("p",[e._v("The Redis Distributed Lock will work like:")]),e._v(" "),i("ol",[i("li",[e._v("Try to get the lock, if return 0 which means the lock is already exists or we get a lock successfully.")]),e._v(" "),i("li",[e._v("To avoid a situation that after get lock the program go into an exception, we need to set a expire time to the lock")]),e._v(" "),i("li",[e._v("Release the lock and use DEL to delete the lock data")])]),e._v(" "),i("p",[e._v("Here is an example:")]),e._v(" "),i("h5",{attrs:{id:"get-lock"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#get-lock"}},[e._v("#")]),e._v(" get lock")]),e._v(" "),i("div",{staticClass:"language- extra-class"},[i("pre",[i("code",[e._v('public class RedisTool {\n    private static final String LOCK_SUCCESS = "OK";\n    private static final String SET_IF_NOT_EXIST = "NX";\n    private static final String SET_WITH_EXPIRE_TIME = "PX";\n    /**\n     * get lock\n     * @param jedis Redis client\n     * @param lockKey \n     * @param requestId \n     * @param expireTime \n     * @return whether success\n     */\n    public static boolean tryGetDistributedLock(Jedis jedis, String lockKey, String requestId, int expireTime) {\n        String result = jedis.set(lockKey, requestId, SET_IF_NOT_EXIST, SET_WITH_EXPIRE_TIME, expireTime);\n        if (LOCK_SUCCESS.equals(result)) {\n            return true;\n        }\n        return false;\n    }\n}\n')])])]),i("h5",{attrs:{id:"release-lock"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#release-lock"}},[e._v("#")]),e._v(" release lock")]),e._v(" "),i("div",{staticClass:"language- extra-class"},[i("pre",[i("code",[e._v("public class RedisTool {\n\n    private static final Long RELEASE_SUCCESS = 1L;\n\n    /**\n     * release lock\n     * @param jedis Redis client\n     * @param lockKey \n     * @param requestId \n     * @return whether success\n     */\n    public static boolean releaseDistributedLock(Jedis jedis, String lockKey, String requestId) {\n\n        String script = \"if redis.call('get', KEYS[1]) == ARGV[1] then return redis.call('del', KEYS[1]) else return 0 end\";\n        Object result = jedis.eval(script, Collections.singletonList(lockKey), Collections.singletonList(requestId));\n\n        if (RELEASE_SUCCESS.equals(result)) {\n            return true;\n        }\n        return false;\n    }\n}")])])])])}),[],!1,null,null,null);t.default=r.exports}}]);