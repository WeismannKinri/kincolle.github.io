(window.webpackJsonp=window.webpackJsonp||[]).push([[119],{843:function(e,n,t){"use strict";t.r(n);var a=t(5),i=Object(a.a)({},(function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h2",{attrs:{id:"interface-introduction"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#interface-introduction"}},[e._v("#")]),e._v(" Interface Introduction")]),e._v(" "),t("p",[e._v("There is an interface in spring named BeanPostProcessor. It has 2 functions:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("public interface BeanPostProcessor\n{\n\n    public abstract Object postProcessBeforeInitialization(Object obj, String s)\n        throws BeansException;\n\n    public abstract Object postProcessAfterInitialization(Object obj, String s)\n        throws BeansException;\n}\n")])])]),t("p",[e._v("We can know it from the name of its function:")]),e._v(" "),t("ol",[t("li",[e._v("postProcessBeforeInitialization: Operate before init")]),e._v(" "),t("li",[e._v("postProcessAfterInitialization: Operate after init")])]),e._v(" "),t("h2",{attrs:{id:"source-code"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#source-code"}},[e._v("#")]),e._v(" Source Code")]),e._v(" "),t("p",[e._v("We find its source from the AbstractAutowireCapableBeanFactory class:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v('protected Object initializeBean(final String beanName, final Object bean, RootBeanDefinition mbd) {\n    if (System.getSecurityManager() != null) {\n        AccessController.doPrivileged(new PrivilegedAction<Object>() {\n            @Override\n            public Object run() {\n                invokeAwareMethods(beanName, bean);\n                return null;\n            }\n        }, getAccessControlContext());\n    }\n    else {\n        invokeAwareMethods(beanName, bean);\n    }\n\n    Object wrappedBean = bean;\n    if (mbd == null || !mbd.isSynthetic()) {\n        wrappedBean = applyBeanPostProcessorsBeforeInitialization(wrappedBean, beanName);\n    }\n\n    try {\n        invokeInitMethods(beanName, wrappedBean, mbd);\n    }\n    catch (Throwable ex) {\n        throw new BeanCreationException(\n                (mbd != null ? mbd.getResourceDescription() : null),\n                beanName, "Invocation of init method failed", ex);\n    }\n\n    if (mbd == null || !mbd.isSynthetic()) {\n        wrappedBean = applyBeanPostProcessorsAfterInitialization(wrappedBean, beanName);\n    }\n    return wrappedBean;\n}\n')])])]),t("p",[e._v("And the source code of applyBeanPostProcessorsBeforeInitialization and applyBeanPostProcessorsAfterInitialization is:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("public Object applyBeanPostProcessorsBeforeInitialization(Object existingBean, String beanName)\n        throws BeansException {\n\n    Object result = existingBean;\n    for (BeanPostProcessor beanProcessor : getBeanPostProcessors()) {\n        result = beanProcessor.postProcessBeforeInitialization(result, beanName);\n        if (result == null) {\n            return result;\n        }\n    }\n    return result;\n}\n\npublic Object applyBeanPostProcessorsAfterInitialization(Object existingBean, String beanName)\n        throws BeansException {\n\n    Object result = existingBean;\n    for (BeanPostProcessor beanProcessor : getBeanPostProcessors()) {\n        result = beanProcessor.postProcessAfterInitialization(result, beanName);\n        if (result == null) {\n            return result;\n        }\n    }\n    return result;\n}\n")])])]),t("p",[e._v("From the code we know around invokeInitMethods, spring will invoke BeanPostProcessor and do its functions. In invokeInitMethods, there are 2 important points:")]),e._v(" "),t("ol",[t("li",[t("p",[e._v("Judge whether extends InitializingBean, if so then invoke afterPropertiesSet().")])]),e._v(" "),t("li",[t("p",[e._v("Judge whether set the init-method, if so then do the function which is setted.")]),e._v(" "),t("p",[e._v("protected void invokeInitMethods(String beanName, final Object bean, RootBeanDefinition mbd)\nthrows Throwable {")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v(' boolean isInitializingBean = (bean instanceof InitializingBean);\n if (isInitializingBean && (mbd == null || !mbd.isExternallyManagedInitMethod("afterPropertiesSet"))) {\n     if (logger.isDebugEnabled()) {\n         logger.debug("Invoking afterPropertiesSet() on bean with name \'" + beanName + "\'");\n     }\n     if (System.getSecurityManager() != null) {\n         try {\n             AccessController.doPrivileged(new PrivilegedExceptionAction<Object>() {\n                 @Override\n                 public Object run() throws Exception {\n                     ((InitializingBean) bean).afterPropertiesSet();\n                     return null;\n                 }\n             }, getAccessControlContext());\n         }\n         catch (PrivilegedActionException pae) {\n             throw pae.getException();\n         }\n     }\n     else {\n         ((InitializingBean) bean).afterPropertiesSet();\n     }\n }\n\n if (mbd != null) {\n     String initMethodName = mbd.getInitMethodName();\n     if (initMethodName != null && !(isInitializingBean && "afterPropertiesSet".equals(initMethodName)) &&\n             !mbd.isExternallyManagedInitMethod(initMethodName)) {\n         invokeCustomInitMethod(beanName, bean, mbd);\n     }\n }\n')])])]),t("p",[e._v("}")])])]),e._v(" "),t("h2",{attrs:{id:"example"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#example"}},[e._v("#")]),e._v(" Example")]),e._v(" "),t("h4",{attrs:{id:"_1-define-interface-and-implementation"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-define-interface-and-implementation"}},[e._v("#")]),e._v(" 1. Define interface and implementation")]),e._v(" "),t("p",[e._v("DemoService interface")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("public interface DemoService {\n    public void sayHello();\n}\n")])])]),t("p",[e._v("DemoServiceImpl")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v('public class DemoServiceImpl implements DemoService,NameInit {\n    String name;\n\n    @Override\n    public void sayHello() {\n        System.out.println("hello "+name);\n    }\n\n    @Override\n    public void setName(String name) {\n        this.name=name;\n    }\n}\n')])])]),t("h4",{attrs:{id:"_2-define-bean"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-define-bean"}},[e._v("#")]),e._v(" 2. Define bean")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v('    <bean id="demoService" class="com.zjl.beanpostprocessor.DemoServiceImpl">\n    </bean>\n')])])]),t("h4",{attrs:{id:"_3-define-inject-interface"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-define-inject-interface"}},[e._v("#")]),e._v(" 3. Define inject interface")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("public interface NameInit {\n    public void setName(String name);\n}\n")])])]),t("h4",{attrs:{id:"_4-define-a-beanpostprocessor-instence-and-if-it-extends-nameinit-then-inject-name"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-define-a-beanpostprocessor-instence-and-if-it-extends-nameinit-then-inject-name"}},[e._v("#")]),e._v(" 4. Define a BeanPostProcessor instence and if it extends NameInit then inject name.")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("public class NameBeanPostProcessor implements BeanPostProcessor {\n    String name;\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    @Override\n    public Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException {\n        if(bean instanceof NameInit){\n            ((NameInit)bean).setName(name);\n        }\n        return bean;\n    }\n\n    @Override\n    public Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException {\n        return bean;\n    }\n}\n")])])]),t("h4",{attrs:{id:"_5-define-bean-and-inject-name-value"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-define-bean-and-inject-name-value"}},[e._v("#")]),e._v(" 5. Define bean and inject name value")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v('    <bean id="nameBeanPostProcessor" class="com.zjl.beanpostprocessor.NameBeanPostProcessor">\n        <property name="name" value="kincolle"></property>\n    </bean>\n')])])]),t("h4",{attrs:{id:"_6-define-another-beanpostprocessor-and-print-log"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6-define-another-beanpostprocessor-and-print-log"}},[e._v("#")]),e._v(" 6. define another BeanPostProcessor and print log")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v('public class LogBeanPostProcessor implements BeanPostProcessor {\n\n    @Override\n    public Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException {\n        System.out.println("running:"+beanName);\n        return bean;\n    }\n\n    @Override\n    public Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException {\n        System.out.println("running done:"+beanName);\n        return bean;\n    }\n}\n')])])]),t("h4",{attrs:{id:"_7-define-bean"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7-define-bean"}},[e._v("#")]),e._v(" 7. Define bean")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v('    <bean id="logBeanPostProcessor" class="com.zjl.beanpostprocessor.LogBeanPostProcessor">\n    </bean>\n')])])]),t("h4",{attrs:{id:"_8-test"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_8-test"}},[e._v("#")]),e._v(" 8. Test")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v('public class BeanPostProcessorTest {\n    public static void main(String[] args) {\n        ApplicationContext context=new FileSystemXmlApplicationContext("beanpostprocessor.xml");\n        DemoService demoService=(DemoService) context.getBean("demoService");\n        demoService.sayHello();\n    }\n}\n')])])]),t("h4",{attrs:{id:"_9-result"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_9-result"}},[e._v("#")]),e._v(" 9. Result")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("running:demoService\nrunning done:demoService\nhello kincolle")])])])])}),[],!1,null,null,null);n.default=i.exports}}]);