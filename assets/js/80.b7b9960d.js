(window.webpackJsonp=window.webpackJsonp||[]).push([[80],{686:function(e,n,s){"use strict";s.r(n);var t=s(0),r=Object(t.a)({},(function(){var e=this,n=e.$createElement,s=e._self._c||n;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("p",[e._v("If you want to sort a list especially when you want to sort by using elements of collections. At this time you can use sort function of Collections class.")]),e._v(" "),s("p",[e._v("First, let's see a simple example:")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[e._v("public static void main(String[] args) {  \n    List<Integer> nums = new ArrayList<Integer>();  \n        nums.add(3);  \n        nums.add(5);  \n        nums.add(1);  \n        nums.add(0);  \n        System.out.println(nums);  \n        Collections.sort(nums);  \n        System.out.println(nums);  \n}  \n")])])]),s("p",[e._v("The result will be:")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[e._v("[3, 5, 1, 0]\n[0, 1, 3, 5]\n")])])]),s("p",[e._v("Then, let's see a complex example:")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[e._v('public class User implements Comparable<User>{        \n    private int score;        \n    private int age;  \n      \n    public User(int score, int age){  \n        super();  \n        this.score = score;  \n        this.age = age;  \n    }  \n  \n    public int getScore() {  \n        return score;  \n    }  \n  \n    public void setScore(int score) {  \n        this.score = score;  \n    }  \n  \n    public int getAge() {  \n        return age;  \n    }  \n  \n    public void setAge(int age) {  \n        this.age = age;  \n    }  \n  \n    @Override  \n    public int compareTo(User o) {  \n        int i = this.getAge() - o.getAge();//order by age firstly  \n        if(i == 0){  \n            return this.score - o.getScore();//then order by socre  \n        }  \n        return i;  \n    }  \n}  \n  \npublic static void main(String[] args) {  \n        List<User> users = new ArrayList<User>();  \n        users.add(new User(78, 26));  \n        users.add(new User(67, 23));  \n        users.add(new User(34, 56));  \n        users.add(new User(55, 23));  \n        Collections.sort(users);  \n        for(User user : users){  \n            System.out.println(user.getScore() + "," + user.getAge());  \n        }  \n}\n')])])]),s("p",[e._v("Then the result will be")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[e._v("55,23\n67,23\n78,26\n34,56")])])])])}),[],!1,null,null,null);n.default=r.exports}}]);