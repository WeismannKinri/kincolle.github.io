(window.webpackJsonp=window.webpackJsonp||[]).push([[130],{752:function(e,n,s){"use strict";s.r(n);var t=s(0),a=Object(t.a)({},(function(){var e=this,n=e.$createElement,s=e._self._c||n;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h2",{attrs:{id:"introduction"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#introduction"}},[e._v("#")]),e._v(" Introduction")]),e._v(" "),s("p",[e._v("In spring we use TaskExecutor to do mutilthread tasks. The ThreadPoolTaskExecutor can implements a TaskExecutor with a thread pool.")]),e._v(" "),s("h2",{attrs:{id:"example"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#example"}},[e._v("#")]),e._v(" Example")]),e._v(" "),s("h4",{attrs:{id:"java-config"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#java-config"}},[e._v("#")]),e._v(" Java config")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[e._v('@Configuration\n@ComponentScan("kincolle.TaskExecutor")\n@EnableAsync \npublic class TaskExecutorConfig implements AsyncConfigurer{\n    @Override\n    public Executor getAsyncExecutor() {\n        ThreadPoolTaskExecutor taskExecutor = new ThreadPoolTaskExecutor();\n        taskExecutor.setCorePoolSize(5);\n        taskExecutor.setMaxPoolSize(10);\n        taskExecutor.setQueueCapacity(25);\n        taskExecutor.initialize();\n        return taskExecutor;\n    }\n\n    @Override\n    public AsyncUncaughtExceptionHandler getAsyncUncaughtExceptionHandler() {\n        return null;\n    }\n}\n')])])]),s("h4",{attrs:{id:"execute-class"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#execute-class"}},[e._v("#")]),e._v(" Execute class")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[e._v('@Service\npublic class AsyncTaskService {\n\n    @Async\n    public void executeAsyncTask(Integer i){\n        System.out.println("executeAsyncTask:"+i);\n    }\n\n    @Async\n    public void executeAsyncTaskPlus(Integer i){\n        System.out.println("executeAsyncTaskPlus:"+i);\n    }\n\n}\n')])])]),s("h4",{attrs:{id:"run-class"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#run-class"}},[e._v("#")]),e._v(" Run class")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[e._v("public class Main {\n    public static void main(String[] args) {\n        AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(TaskExecutorConfig.class);\n\n        AsyncTaskService asyncTaskService = context.getBean(AsyncTaskService.class);\n        for(int i=0;i<10;i++){\n            asyncTaskService.executeAsyncTaskPlus(i);\n            asyncTaskService.executeAsyncTask(i+1);\n        }\n        context.close();\n\n    }\n}\n")])])]),s("h4",{attrs:{id:"result"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#result"}},[e._v("#")]),e._v(" Result")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[e._v("executeAsyncTask:1\nexecuteAsyncTask:2\nexecuteAsyncTask:3\nexecuteAsyncTask:4\nexecuteAsyncTaskPlus:2\nexecuteAsyncTaskPlus:3\nexecuteAsyncTaskPlus:5\nexecuteAsyncTask:6\nexecuteAsyncTaskPlus:6\nexecuteAsyncTask:7\nexecuteAsyncTaskPlus:7\nexecuteAsyncTask:8")])])])])}),[],!1,null,null,null);n.default=a.exports}}]);