(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{567:function(e,t,r){e.exports=r.p+"assets/img/1.ee070093.png"},568:function(e,t,r){e.exports=r.p+"assets/img/2.cd1ddf93.png"},569:function(e,t,r){e.exports=r.p+"assets/img/3.053ca1c2.png"},570:function(e,t,r){e.exports=r.p+"assets/img/4.d93e6ded.png"},732:function(e,t,r){"use strict";r.r(t);var a=r(5),s=Object(a.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h2",{attrs:{id:"_1-definition-of-tree"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-definition-of-tree"}},[e._v("#")]),e._v(" 1. Definition of Tree")]),e._v(" "),a("p",[e._v("Tree is a kind of data structure and it is constructed by n(n>=1) nodes to form a relationship with some layouts.")]),e._v(" "),a("p",[a("img",{attrs:{src:r(567),alt:""}})]),e._v(" "),a("p",[e._v("There are some characters in Tree:")]),e._v(" "),a("ul",[a("li",[e._v("every node has 0 or more than 0 node")]),e._v(" "),a("li",[e._v("node with no father node is the root node")]),e._v(" "),a("li",[e._v("every node except the root node has a father node")]),e._v(" "),a("li",[e._v("every node excepy the root node can divide into more than one subtree.")])]),e._v(" "),a("h2",{attrs:{id:"_2-binary-tree"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-binary-tree"}},[e._v("#")]),e._v(" 2. Binary Tree")]),e._v(" "),a("h3",{attrs:{id:"_2-1-definition-of-binary-tree"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-definition-of-binary-tree"}},[e._v("#")]),e._v(" 2.1 Definition of Binary Tree")]),e._v(" "),a("p",[e._v("Binary tree is a kind of tree than its number of subtree is less than 2 for every node.")]),e._v(" "),a("p",[a("img",{attrs:{src:r(568),alt:""}})]),e._v(" "),a("h3",{attrs:{id:"_2-2-character-of-binary-tree"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-character-of-binary-tree"}},[e._v("#")]),e._v(" 2.2 Character of Binary Tree")]),e._v(" "),a("ul",[a("li",[e._v("The largest number at the i"),a("sub",[e._v("th")]),e._v(" layout is 2"),a("sup",[e._v("i-1")]),e._v("(i>=1)")]),e._v(" "),a("li",[e._v("Binary tree that its height is k has less than  2"),a("sup",[e._v("k")]),e._v("-1 nodes")]),e._v(" "),a("li",[e._v("Binary tree that has n nodes has a height at least (log"),a("sub",[e._v("2")]),e._v("n)+1")])]),e._v(" "),a("h2",{attrs:{id:"_3-full-binary-tree"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-full-binary-tree"}},[e._v("#")]),e._v(" 3. Full Binary Tree")]),e._v(" "),a("p",[e._v("A binary tree that its weight is h and number of its node is 2h-1,then it is a Full Binary Tree")]),e._v(" "),a("p",[a("img",{attrs:{src:r(569),alt:""}})]),e._v(" "),a("h2",{attrs:{id:"_4-complete-binary-tree"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-complete-binary-tree"}},[e._v("#")]),e._v(" 4. Complete Binary Tree")]),e._v(" "),a("p",[e._v("A Binary Tree is complete Binary Tree if all levels are completely filled except possibly the last level and the last level has all keys as left as possible.")]),e._v(" "),a("p",[a("img",{attrs:{src:r(570),alt:""}})])])}),[],!1,null,null,null);t.default=s.exports}}]);