(window.webpackJsonp=window.webpackJsonp||[]).push([[84],{688:function(e,n,t){"use strict";t.r(n);var i=t(0),s=Object(i.a)({},(function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"linkedlist"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#linkedlist"}},[e._v("#")]),e._v(" LinkedList")]),e._v(" "),t("h2",{attrs:{id:"_1-introduction"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-introduction"}},[e._v("#")]),e._v(" 1 Introduction")]),e._v(" "),t("p",[e._v("Like ArrayList, LinkedList implements List too, but the inner data structure is different. LinkedList is constructed by using linked list.  Here is the defined source code:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("public class LinkedList<E>\n    extends AbstractSequentialList<E>\n    implements List<E>, Deque<E>, Cloneable, java.io.Serializable\n{}\n")])])]),t("p",[e._v("As we can see that LinkedList extends AbstractSequentialList and implements List, Deque, Cloneable, java.io.Serializable."),t("br"),e._v("\nLinkedList is using Fail-Fast too.")]),e._v(" "),t("h2",{attrs:{id:"_2-data-structure"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-data-structure"}},[e._v("#")]),e._v(" 2 Data Structure")]),e._v(" "),t("p",[e._v("A linked list is represented by a pointer to the first node of the linked list and the first node is called head. If the linked list is empty, then value of head is NULL. Each node in a list consists of at least two parts: 1) data 2) pointer to the next node. Here is the source code:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("transient int size = 0;\ntransient Node<E> first; // head pointer of linkedlist\ntransient Node<E> last; // tail pointer\n// storage object node\nprivate static class Node<E> {\n    E item;\n    Node<E> next; // point to next node\n    Node<E> prev; // point to last node\n\n    Node(Node<E> prev, E element, Node<E> next) {\n        this.item = element;\n        this.next = next;\n        this.prev = prev;\n    }\n}\n")])])]),t("h2",{attrs:{id:"_3-construction"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-construction"}},[e._v("#")]),e._v(" 3 Construction")]),e._v(" "),t("p",[e._v("There are two construct functions: LinkedLis()å’ŒLinkedList(Collection<? extends E> c):")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("/**\n *  Create a empty LinkedList\n */\npublic LinkedList() {\n    header.next = header.previous = header;\n}\n\n/**\n *  Create a empty LinkedList with elements of the input collection \n */\npublic LinkedList(Collection<? extends E> c) {\n    this();\n    addAll(c);\n}\n")])])]),t("h2",{attrs:{id:"_4-storage"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-storage"}},[e._v("#")]),e._v(" 4 Storage")]),e._v(" "),t("h5",{attrs:{id:"add-e-e"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#add-e-e"}},[e._v("#")]),e._v(" add(E e)")]),e._v(" "),t("p",[e._v("This function will add a new element at the tail of one LinkedList. First of all, this function will let the last node point to a new Node(l), and according to l create a newNode and its element the input one. Then we let the last node point to newNode. Here is the source code:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("/**\n     * Appends the specified element to the end of this list.\n     *\n     * <p>This method is equivalent to {@link #addLast}.\n     *\n     * @param e element to be appended to this list\n     * @return {@code true} (as specified by {@link Collection#add})\n     */\npublic boolean add(E e) {\n    linkLast(e);\n    return true;\n}\n/**\n* Links e as last element.\n*/\nvoid linkLast(E e) {\n    final Node<E> l = last;\n    final Node<E> newNode = new Node<>(l, e, null);\n    last = newNode;\n    if (l == null)\n        first = newNode;\n    else\n        l.next = newNode;\n    size++;\n    modCount++;\n}\n")])])]),t("h5",{attrs:{id:"add-int-index-e-element"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#add-int-index-e-element"}},[e._v("#")]),e._v(" add(int index, E element)")]),e._v(" "),t("p",[e._v("This function let you can insert one element at the index position. If the index equals size, the inserted position will be the tail of linkedlist. Here is the source code:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("/**\n* Inserts the specified element at the specified position in this list.\n* Shifts the element currently at that position (if any) and any\n* subsequent elements to the right (adds one to their indices).\n*\n* @param index index at which the specified element is to be inserted\n* @param element element to be inserted\n* @throws IndexOutOfBoundsException {@inheritDoc}\n*/\npublic void add(int index, E element) {\n   checkPositionIndex(index);\n\n   if (index == size)\n       linkLast(element);\n   else\n       linkBefore(element, node(index));\n}\n/**\n    * Inserts element e before non-null Node succ.\n    */\nvoid linkBefore(E e, Node<E> succ) {\n   // assert succ != null;\n   final Node<E> pred = succ.prev\n   final Node<E> newNode = new Node<>(pred, e, succ);\n   succ.prev = newNode;\n   if (pred == null)\n       first = newNode;\n   else\n       pred.next = newNode;\n   size++;\n   modCount++;\n}\n")])])]),t("h5",{attrs:{id:"addall-collection-extends-e-c-and-addall-int-index-collection-extends-e-c"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#addall-collection-extends-e-c-and-addall-int-index-collection-extends-e-c"}},[e._v("#")]),e._v(" addAll(Collection<? extends E> c) and addAll(int index, Collection<? extends E> c)")]),e._v(" "),t("p",[e._v("addAll will add all elements of input collection at the tail of linkedlist or at the position of index. Here is the source code:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v('public boolean addAll(Collection<? extends E> c) {\n    return addAll(size, c);\n}\n\n\npublic boolean addAll(int index, Collection<? extends E> c) {\n    if (index < 0 || index > size)\n        throw new IndexOutOfBoundsException("Index: " + index + ", Size: " + size);\n    Object[] a = c.toArray();\n    int numNew = a.length;    \n   \n    if (numNew == 0)\n        return false;\n    \n    modCount++;\n    \n    Entry<E> successor = (index == size ? header : entry(index));\n    Entry<E> predecessor = successor.previous;\n    \n    for (int i = 0; i < numNew; i++) {\n        Entry<E> e = new Entry<E>((E) a[i], successor, predecessor);\n        predecessor.next = e;\n        predecessor = e;\n    }\n    successor.previous = predecessor;\n    \n    size += numNew;\n    return true;\n}\n')])])])])}),[],!1,null,null,null);n.default=s.exports}}]);