(window.webpackJsonp=window.webpackJsonp||[]).push([[130],{758:function(e,n,t){"use strict";t.r(n);var a=t(0),r=Object(a.a)({},(function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h2",{attrs:{id:"config-async"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#config-async"}},[e._v("#")]),e._v(" Config @Async")]),e._v(" "),t("p",[e._v("If we use Java config we just need to add @EnableAsync on the config class like the following:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("@Configuration\n@EnableAsync\npublic class SpringAsyncConfig { ... }\n")])])]),t("p",[e._v("If we use xml the like the following:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v('<task:executor id="myexecutor" pool-size="5"  />\n<task:annotation-driven executor="myexecutor"/>\n')])])]),t("h2",{attrs:{id:"function-without-return"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#function-without-return"}},[e._v("#")]),e._v(" Function without return")]),e._v(" "),t("p",[e._v("The following is an example that use @Asycn with no return.")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v('@Async\npublic void asyncMethodWithVoidReturnType() {\n    System.out.println("Execute method asynchronously. "\n      + Thread.currentThread().getName());\n}\n')])])]),t("h2",{attrs:{id:"function-with-return"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#function-with-return"}},[e._v("#")]),e._v(" Function with return")]),e._v(" "),t("p",[e._v("Also you can define return when use @Async")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v('@Async\npublic Future<String> asyncMethodWithReturnType() {\n    System.out.println("Execute method asynchronously - "\n      + Thread.currentThread().getName());\n    try {\n        Thread.sleep(5000);\n        return new AsyncResult<String>("hello world !!!!");\n    } catch (InterruptedException e) {\n        //\n    }\n\n    return null;\n}\n')])])]),t("h2",{attrs:{id:"executor"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#executor"}},[e._v("#")]),e._v(" Executor")]),e._v(" "),t("p",[e._v("In default situation, Spring uses SimpleAsyncTaskExecutor to run async tasks. We can use our own executor to do it.")]),e._v(" "),t("p",[e._v("Set a executor in config class")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v('@Configuration\n@EnableAsync\npublic class SpringAsyncConfig {\n\n    @Bean(name = "threadPoolTaskExecutor")\n    public Executor threadPoolTaskExecutor() {\n        return new ThreadPoolTaskExecutor();\n    }\n}\n')])])]),t("p",[e._v("Then input name of the exexcutor when use @Async")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v('@Async("threadPoolTaskExecutor")\npublic void asyncMethodWithConfiguredExecutor() {\n    System.out.println("Execute method with configured executor - "\n      + Thread.currentThread().getName());\n}\n')])])]),t("h2",{attrs:{id:"global-executor"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#global-executor"}},[e._v("#")]),e._v(" Global Executor")]),e._v(" "),t("p",[e._v("The config class implements AsyncConfigurer interface which means the executor from getAsyncExecutor() will be the default executor.")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("@Configuration\n@EnableAsync\npublic class SpringAsyncConfig implements AsyncConfigurer {\n    @Override\n    public Executor getAsyncExecutor() {\n        return new ThreadPoolTaskExecutor();\n    }\n}")])])])])}),[],!1,null,null,null);n.default=r.exports}}]);