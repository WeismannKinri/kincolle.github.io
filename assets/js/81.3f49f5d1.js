(window.webpackJsonp=window.webpackJsonp||[]).push([[81],{689:function(e,a,t){"use strict";t.r(a);var l=t(0),r=Object(l.a)({},(function(){var e=this,a=e.$createElement,t=e._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"coding-rule"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#coding-rule"}},[e._v("#")]),e._v(" Coding Rule")]),e._v(" "),t("p",[e._v("First of all, I have learning Coding Rule of Alibaba Group, so I write this blog to learn it again.")]),e._v(" "),t("h2",{attrs:{id:"_1-naming"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-naming"}},[e._v("#")]),e._v(" 1 Naming")]),e._v(" "),t("ol",[t("li",[t("p",[e._v("Name in code can not be starting or ending with _ or $\n"),t("label",{staticStyle:{color:"red"}},[e._v("wrong example")]),e._v(": "),t("br"),e._v(" "),t("em",[e._v("name/ "),t("em",[t("em",[e._v("name / $name / name")]),e._v(" / name$ / name")])])])]),e._v(" "),t("li",[t("p",[e._v("Name must be in English\n"),t("label",{staticStyle:{color:"blue"}},[e._v("right example")]),e._v(":"),t("br"),e._v(" alibaba / google /apple\n"),t("label",{staticStyle:{color:"red"}},[e._v("wrong example")]),e._v(":"),t("br"),e._v(" guge / pingguo")])]),e._v(" "),t("li",[t("p",[e._v("Name of Class must use UpperCamelCase style except DO / BO / DTO /VO and so on.\n"),t("label",{staticStyle:{color:"blue"}},[e._v("right example")]),e._v(": "),t("br"),e._v("UserDO / TcpUdpDeal\n"),t("label",{staticStyle:{color:"red"}},[e._v("wrong example")]),e._v(": "),t("br"),e._v("userDO / tcpudpdeala")])]),e._v(" "),t("li",[t("p",[e._v("Name of function, parameter, class variable and local variable must use lowerCamelCase styple.\n"),t("label",{staticStyle:{color:"blue"}},[e._v("right example")]),e._v(":"),t("br"),e._v(" localValue")])]),e._v(" "),t("li",[t("p",[e._v('Name of Const variables need to be writed as upperclass and words are spletted by "_". You\'d better  let the name to be easy to understand and not to be too long.\n'),t("label",{staticStyle:{color:"blue"}},[e._v("right example")]),e._v(": "),t("br"),e._v("MAX_STOCK_COUNT\n"),t("label",{staticStyle:{color:"red"}},[e._v("wrong example")]),e._v(": "),t("br"),e._v("MAX_COUNT")])]),e._v(" "),t("li",[t("p",[e._v("Name of abstract class need to start with Abstract or Base; Name of exception class neet to be end with Exception; Name of test class need to be end with Test\n"),t("label",{staticStyle:{color:"blue"}},[e._v("right example")]),e._v(": "),t("br"),e._v("MAX_STOCK_COUNT\n"),t("label",{staticStyle:{color:"red"}},[e._v("wrong example")]),e._v(": "),t("br"),e._v("MAX_COUNT")])]),e._v(" "),t("li",[t("p",[e._v("Type and [] need to stay close to difine a array\n"),t("label",{staticStyle:{color:"blue"}},[e._v("right example")]),e._v(": "),t("br"),e._v("int[] arrayDemo\n"),t("label",{staticStyle:{color:"red"}},[e._v("wrong example")]),e._v(": "),t("br"),e._v("int arrayDemop[]")])])])])}),[],!1,null,null,null);a.default=r.exports}}]);